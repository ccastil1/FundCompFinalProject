	circular_lace(x1+r, y1, r/3);//0	
	circular_lace(x1+r*cos(theta), y1+r*sin(theta)  , r/3);//pi/3
	circular_lace(x1+r*cos(4*theta), y1+r*sin(2*theta), r/3);//2pi/3
	circular_lace(x1+r*cos(3*theta), y1+r*sin(3*theta), r/3);//4pi/3
 	circular_lace(x1+r*cos(4*theta), y1+r*sin(4*theta), r/3);//5pi/3
	circular_lace(x1+r*cos(5*theta), y1+r*sin(5*theta), r/3);//2pi
}
 
void snowflake(int xcenter, int ycenter, int radius){
    // base case
    //if radius of snowflake is less then one return
    if(radius<1) return;
 
    // drawing step
    //draws the 5 armed star looking thing that apparantly is a snowflake
    draw_star(xcenter,ycenter,radius);
 
    // recursive step
    //calls snowflake 5 times, one at the end of each arm
    snowflake(xcenter,ycenter+radius,radius/3);
    snowflake(xcenter+radius*cos(pi/2+2*pi/5),ycenter+radius*sin(pi/2+2*pi/5),radius/3);
    snowflake(xcenter+radius*cos(pi/2+4*pi/5),ycenter+radius*sin(pi/2+4*pi/5),radius/3);
    snowflake(xcenter+radius*cos(pi/2+6*pi/5),ycenter+radius*sin(pi/2+6*pi/5),radius/3);
    snowflake(xcenter+radius*cos(pi/2+8*pi/5),ycenter+radius*sin(pi/2+8*pi/5),radius/3);
    }
 
void tree(int xcenter, int ycenter, int length, double theta){
    // base case
    if(length<1) return;//if length of branch is less than 1 then return
 
    // drawing step
    //calculating the end of the branch
    int xend=xcenter+length*cos(theta);
    int yend=ycenter-length*sin(theta);
    //drawing branch calculated
    gfx_line(xcenter,ycenter,xend,yend);
 
    // recursive step
    //calls tree twice, one for each branch
    tree(xend,yend,2*length/3,theta-pi/6);
    tree(xend,yend,2*length/3,theta+pi/6);
    }
 
void fern(int xcenter, int ycenter, int length, double theta){
    // base case
    if(length<5) return;//if length of branch is less than 5 then return
 
    // drawing step
    //set up for the start point of each branch
    int xend1=xcenter+length*cos(theta);
    int yend1=ycenter-length*sin(theta);
    int xend2=xcenter+3*length/4*cos(theta);
    int yend2=ycenter-3*length/4*sin(theta);
    int xend3=xcenter+length/2*cos(theta);
    int yend3=ycenter-length/2*sin(theta);
    int xend4=xcenter+length/4*cos(theta);
    int yend4=ycenter-length/4*sin(theta);
    //drawing the branch
    gfx_line(xcenter,ycenter,xend1,yend1);
    gfx_line(xcenter,ycenter,xend2,yend2);
    gfx_line(xcenter,ycenter,xend3,yend3);
    gfx_line(xcenter,ycenter,xend4,yend4);
 
    // recursive step
    //call fern function eight times, one for each branch
    fern(xend1,yend1,length/3,theta-pi/6);
    fern(xend1,yend1,length/3,theta+pi/6);
    fern(xend2,yend2,length/3,theta-pi/6);
    fern(xend2,yend2,length/3,theta+pi/6);
    fern(xend3,yend3,length/3,theta-pi/6);
    fern(xend3,yend3,length/3,theta+pi/6);
    fern(xend4,yend4,length/3,theta-pi/6);
    fern(xend4,yend4,length/3,theta+pi/6);
    }
 
void spiral_of_spirals(int radius, double theta, int xcenter, int ycenter){
    // base case
    if(radius<1) return; //if radius is less then one then end
 
    //drawing step
    gfx_line(xcenter,ycenter,xcenter,ycenter);//draws a dot at the center of the next spiral
 
    // recursive step
    for(1;radius>1;radius=9*radius/10){//for loop that calls another spiral at each "dot" in the
        //current spiral
        spiral_of_spirals(35*radius/100,theta,xcenter+radius*cos(theta),ycenter+radius*sin(theta));
        theta+=pi/5;
        }
    }
 
